Initialize the program!
Verify Test Cases
All passed!
Done Verification
Generating repair candidates!
Processing prog.c
Total 36 different repair schemas!!!!
Total 72 different repair candidate templates for scoring!!!
Trying different candidates!
BasicTester pointer: 0xb4b3e50
StringConstTester pointer: 0xb4b4630
CondTester pointer: 0xb4b4560
Counter: 1
Batcher Size:0
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:50
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(l, p, l->next, cnt2, res, cnt1, list, l->prev, l->name)))
    p = l->next;


CondTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if (!(__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 1
Counter: 2
Batcher Size:1
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:50
--Src File: prog.c
Fragment 0:
memset(l, 0, sizeof (*(l)));
p = l->next;


BasicTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
memset(l, 0, sizeof (*(l)));
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 2
Counter: 3
Batcher Size:2
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:50
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, p, l->next, cnt2, res, cnt1, list, l->prev, l->name)))
    return 0;
p = l->next;


CondTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    return 0;
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 3
Counter: 4
Batcher Size:3
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:50
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, p, l->next, cnt2, res, cnt1, list, l->prev, l->name)))
    return 1;
p = l->next;


CondTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    return 1;
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 4
Counter: 5
Batcher Size:4
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:50
--Src File: prog.c
Fragment 0:
if ((__abst_hole(l, p, l->next, cnt2, res, cnt1, list, l->prev, l->name)))
    break;
p = l->next;


CondTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    break;
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 5
Counter: 6
Batcher Size:5
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:50
--Src File: prog.c
Fragment 0:
p = (l)->next;


BasicTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (l)->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 6
Counter: 7
Batcher Size:6
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:50
--Src File: prog.c
Fragment 0:
p = (p);


BasicTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (p);

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 7
Counter: 8
Batcher Size:7
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:50
--Src File: prog.c
Fragment 0:
p = (l);


BasicTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (l);

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 8
Counter: 9
Batcher Size:8
Preprocess the following candidate with BasicTester:
Priority 2500
At location prog.c:50
--Src File: prog.c
Fragment 0:
p = (p)->next;


BasicTester, a patch instance with id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (p)->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 9
Counter: 10
Batcher Size:9
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:50
--Src File: prog.c
Fragment 0:
cnt1 = (0);
p = l->next;


BasicTester, a patch instance with id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
cnt1 = (0);
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Spawn 1 instances, now Total 10
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           //prophet generated patch
           if (__get_mutant()==0) {
           if (!(__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
               p = l->next;
           }
           else if (__get_mutant()==1) {
           memset(l, 0, sizeof (*(l)));
           p = l->next;
           }
           else if (__get_mutant()==2) {
           if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
               return 0;
           p = l->next;
           }
           else if (__get_mutant()==3) {
           if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
               return 1;
           p = l->next;
           }
           else if (__get_mutant()==4) {
           if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
               break;
           p = l->next;
           }
           else if (__get_mutant()==5) {
           p = (l)->next;
           }
           else if (__get_mutant()==6) {
           p = (p);
           }
           else if (__get_mutant()==7) {
           p = (l);
           }
           else if (__get_mutant()==8) {
           p = (p)->next;
           }
           else if (__get_mutant()==9) {
           cnt1 = (0);
           p = l->next;
           }
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if (!(__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
Testing 2 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 2
Branch 0: 0
Branch 1: 1
Branch 2: 0
Iteration 3
Branch 0: 0
Branch 1: 1
Branch 2: 1
Iteration 4
Branch 0: 1
Branch 1: 0
Branch 2: 0
Iteration 5
Branch 0: 1
Branch 1: 0
Branch 2: 1
Iteration 6
Branch 0: 1
Branch 1: 1
Branch 2: 0
Iteration 7
Branch 0: 1
Branch 1: 1
Branch 2: 1
BasicTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
memset(l, 0, sizeof (*(l)));
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
CondTester, Testing instance id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    return 0;
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
Testing 2 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 2
Branch 0: 0
Branch 1: 1
Iteration 3
Branch 0: 1
CondTester, Testing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    return 1;
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
Testing 2 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 1
Passed in iteration!
Testing 3 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Branch 5: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Branch 5: 1
Passed in iteration!
Testing 6 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Branch 5: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Branch 5: 1
Passed in iteration!
Passed Negative Cases wiht CondTestder!
Testing positive cases!
Passed Positive Cases
Collect values for post processing!
Passed!
CondTester, Testing instance id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    break;
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
Testing 2 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 2
Branch 0: 0
Branch 1: 1
Branch 2: 0
Iteration 3
Branch 0: 0
Branch 1: 1
Branch 2: 1
Iteration 4
Branch 0: 1
Branch 1: 0
Iteration 5
Branch 0: 1
Branch 1: 1
BasicTester, Testing instance id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (l)->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (p);

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (l);

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
Passed Negative Cases
Testing positive cases!
Failed positive case 5
BasicTester, Testing instance id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
p = (p)->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
Passed Negative Cases
Testing positive cases!
Passed Positive Cases
Passed!
BasicTester, Testing instance id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
cnt1 = (0);
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Testing negative cases!
CondTester, Postprocessing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           
//Patch 0:
if ((__is_neg(9, &(l), sizeof (l), &(p), sizeof (p), &(l->next), sizeof (l->next), &(cnt2), sizeof (cnt2), &(res), sizeof (res), &(cnt1), sizeof (cnt1), &(list), sizeof (list), &(l->prev), sizeof (l->prev), &(l->name), sizeof (l->name))))
    return 1;
p = l->next;

//CodeSeg 1:
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Trying a synthesis expr 1
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt1 != 0
Verifing Negative cases!
Verifying positive cases
Failed positive case 9
Not passed!
Trying a synthesis expr l->prev != 0
Verifing Negative cases!
Verifying positive cases
Failed positive case 9
Not passed!
Trying a synthesis expr res == 0
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt1 == 0
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr l->prev == 0
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt1 == 2
Verifing Negative cases!
Not passed!
Trying a synthesis expr cnt1 == 1
Verifing Negative cases!
Verifying positive cases
Failed positive case 9
Not passed!
Trying a synthesis expr cnt2 == 4
Verifing Negative cases!
Not passed!
Trying a synthesis expr cnt2 == 2
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt2 == 3
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt2 != 2
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt2 != 3
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt2 != 4
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt1 != 1
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Trying a synthesis expr cnt1 != 2
Verifing Negative cases!
Verifying positive cases
Failed positive case 5
Not passed!
Initial synthesize failed, final attempt
Final attempt 1/2 with expr int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           //prophet generated patch
           if (((0)))
               return 1;
           p = l->next;
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Trying Negative cases!
Final attempt 2/2 with expr int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    struct Node* next;
    struct Node* prev;
    char* name;
};

struct List {
    struct Node* header;
    int size;
};

int repOK (struct List** t);
void newNode(struct Node** n);
void newList(struct List** t);

void newNode(struct Node** n) {
     *n = malloc (sizeof (struct Node));
    (*n)->next = NULL;
    (*n)->prev = NULL;
    (*n)->name = NULL;
}

void newList(struct List** t) {
    *t = malloc(sizeof (struct List));
    (*t)->header = NULL;
    (*t)->size = 0;
}


int repOK (struct List** list) {
    struct Node* l = (*list)->header;
    int cnt1 = 0;
    int res = 0;
    while (cnt1 < (*list)->size) {
       struct  Node* p = l->next;
        int cnt2 = cnt1+1;


        while ((cnt2 <= (*list)->size) && (p != NULL)) {
            if (l==p) {
                res = 1;
                return res;
            }
            cnt2++;
           //prophet generated patch
           if (((1)))
               return 1;
           p = l->next;
// BUG LISTERR3

        }
        l = l->next;
        cnt1 = cnt1 + 1;
    }
        if (res == 1)
            return res;

    struct Node* l1 = (*list)->header;
    int sz=0;
    while (l1!=NULL) {
        sz = sz+1;
        l1 = l1->next;
        if (sz > (*list)->size)
            return 0;
    }

    if (sz != (*list)->size)
        return 1;
    return 0;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    char x[20];
    int status = 0;
    struct List* list ;
    newList(&list);

struct Node* n0;
struct Node* n1;
struct Node* n2;
newNode(&n0);
n0->name = "N0";
newNode(&n1);
n1->name = "N1";
newNode(&n2);
n2->name = "N2";



  struct Node* node=NULL;
    while (fscanf(f,"%s",x)==1) {
        if (x[0] == '"')  continue;

        struct Node* tmp=NULL;
        if (strcmp(x,"NULL")==0)
            tmp = NULL;
        else if (strcmp(x,"N0")==0)
            tmp = n0;
        else if (strcmp(x,"N1")==0)
            tmp = n1;
        else if (strcmp(x,"N2")==0)
            tmp = n2;

        if (status==0) {
            node = tmp;
            status = status +1;
        }
        else if (status == 1) {
            node->prev = tmp;
            status = status +1;
        }

        else if (status ==2) {
            node->next = tmp;
            status =0;
            list->size = list->size +1;
            if (list->header==NULL)
                list->header = node;

        }
    }

    fclose(f);
    int res = repOK(&list);
    printf("%d ", res);

    return 0;
}

Trying Negative cases!
Trying Positive cases!
Postprocessing failed!
Update best score 2499996.000000
Generate a candidate with schema id: 9
Total cnt of passed cond schemas: 1
Total cnt of cond schemas: 4
Counter: 11
Batcher Size:0
The found score 2499996.000000 is greater than current score -0.000000!
Terminate current session!
Generate a candidate with schema id: 9
Total cnt of passed cond schemas: 1
Total cnt of cond schemas: 4
The first schema id that generates patch: 9
Found a fix! Store to: __fixed_prog.c
Repair process ends successfully!
Total 36 different repair schemas!!!!
Total 72 different repair candidate templates for scoring!!!
Total number of compiles: 19
Total number of test eval: 84
