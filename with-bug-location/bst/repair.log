Initialize the program!
Verify Test Cases
All passed!
Done Verification
Generating repair candidates!
Processing prog.c
Total 40 different repair schemas!!!!
Total 72 different repair candidate templates for scoring!!!
Trying different candidates!
BasicTester pointer: 0xa09b260
StringConstTester pointer: 0xa09b110
CondTester pointer: 0xa09b040
Counter: 1
Batcher Size:0
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:48
--Src File: prog.c
Fragment 0:
if (!(__abst_hole(k, x, x->key, x->left, x->right, y, t, x->parent)))
    while ((x != ((void *)0)) && k < x->key)
        x = x->left;


CondTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if (!(__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    while ((x != ((void *)0)) && k < x->key)
        x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 1
Counter: 2
Batcher Size:1
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:48
--Src File: prog.c
Fragment 0:
memset(x, 0, sizeof (*(x)));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
memset(x, 0, sizeof (*(x)));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 2
Counter: 3
Batcher Size:2
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:48
--Src File: prog.c
Fragment 0:
if ((__abst_hole(k, x, x->key, x->left, x->right, y, t, x->parent)))
    break;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


CondTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    break;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 3
Counter: 4
Batcher Size:3
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:48
--Src File: prog.c
Fragment 0:
if ((__abst_hole(k, x, x->key, x->left, x->right, y, t, x->parent)))
    return 0;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


CondTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    return 0;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 4
Counter: 5
Batcher Size:4
Preprocess the following candidate with CondTester:
Priority 5000
At location prog.c:48
--Src File: prog.c
Fragment 0:
if ((__abst_hole(k, x, x->key, x->left, x->right, y, t, x->parent)))
    return 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


CondTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    return 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 5
Counter: 6
Batcher Size:5
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->root = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->root = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 6
Counter: 7
Batcher Size:6
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->size = (*t)->size + 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (*t)->size + 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 7
Counter: 8
Batcher Size:7
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
newNode(&(y));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
newNode(&(y));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 8
Counter: 9
Batcher Size:8
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 9
Counter: 10
Batcher Size:9
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y->right = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->right = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 10
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        //prophet generated patch
        if (__get_mutant()==0) {
        if (!(__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
            while ((x != ((void *)0)) && k < x->key)
                x = x->left;
        }
        else if (__get_mutant()==1) {
        memset(x, 0, sizeof (*(x)));
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==2) {
        if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
            break;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==3) {
        if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
            return 0;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==4) {
        if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
            return 1;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==5) {
        (*t)->root = (x);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==6) {
        (*t)->size = (*t)->size + 1;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==7) {
        newNode(&(y));
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==8) {
        y = x;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==9) {
        y->right = (y);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if (!(__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    while ((x != ((void *)0)) && k < x->key)
        x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Testing 4 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
Branch 1: 0
Iteration 2
Branch 0: 1
Branch 1: 1
Branch 2: 0
Iteration 3
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 0
Iteration 4
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 1
Branch 4: 0
Iteration 5
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 1
Branch 4: 1
Branch 5: 0
Iteration 6
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 1
Branch 4: 1
Branch 5: 1
Branch 6: 0
Iteration 7
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 1
Branch 4: 1
Branch 5: 1
Branch 6: 1
Branch 7: 0
Iteration 8
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 1
Branch 4: 1
Branch 5: 1
Branch 6: 1
Branch 7: 1
Branch 8: 0
Iteration 9
Branch 0: 1
Branch 1: 1
Branch 2: 1
Branch 3: 1
Branch 4: 1
Branch 5: 1
Branch 6: 1
Branch 7: 1
Branch 8: 1
Branch 9: 0
BasicTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
memset(x, 0, sizeof (*(x)));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
CondTester, Testing instance id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    break;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Testing 4 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    return 0;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Testing 4 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
CondTester, Testing instance id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((__is_neg(8, &(k), sizeof (k), &(x), sizeof (x), &(x->key), sizeof (x->key), &(x->left), sizeof (x->left), &(x->right), sizeof (x->right), &(y), sizeof (y), &(t), sizeof (t), &(x->parent), sizeof (x->parent))))
    return 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Testing 4 (with abstract condition)
Iteration 0
Branch 0: 0
Iteration 1
Branch 0: 1
BasicTester, Testing instance id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->root = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (*t)->size + 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
newNode(&(y));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->right = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Counter: 11
Batcher Size:0
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y->right = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 6:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->right = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 11
Counter: 12
Batcher Size:1
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y->left = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 7:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->left = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 12
Counter: 13
Batcher Size:2
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y->left = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 8:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->left = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 13
Counter: 14
Batcher Size:3
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 9:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 14
Counter: 15
Batcher Size:4
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y->left = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 10:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->left = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 15
Counter: 16
Batcher Size:5
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 11:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 16
Counter: 17
Batcher Size:6
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x->parent = y;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 12:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->parent = y;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 17
Counter: 18
Batcher Size:7
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x->parent = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 13:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->parent = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 18
Counter: 19
Batcher Size:8
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x->parent = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 14:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->parent = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 19
Counter: 20
Batcher Size:9
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x->key = k;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 15:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = k;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 20
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        //prophet generated patch
        if (__get_mutant()==0) {
        y->right = (x);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==1) {
        y->left = x;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==2) {
        y->left = (y);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==3) {
        y = (y);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==4) {
        y->left = (x);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==5) {
        y = (x);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==6) {
        x->parent = y;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==7) {
        x->parent = (y);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==8) {
        x->parent = (x);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==9) {
        x->key = k;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 6:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->right = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 7:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->left = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 8:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->left = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 9:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 10:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->left = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 11:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 12:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->parent = y;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 13:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->parent = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 14:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->parent = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 15:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = k;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Passed Negative Cases
Testing positive cases!
Failed positive case 6
Counter: 21
Batcher Size:0
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x->key = (k);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 16:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = (k);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 21
Counter: 22
Batcher Size:1
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
y->right = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 17:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->right = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 22
Counter: 23
Batcher Size:2
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x->key = (0);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 18:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = (0);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 23
Counter: 24
Batcher Size:3
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x = x->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 19:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = x->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 24
Counter: 25
Batcher Size:4
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->size = (k);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 20:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (k);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 25
Counter: 26
Batcher Size:5
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->size = (1);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 21:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (1);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 26
Counter: 27
Batcher Size:6
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x = (x)->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 22:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (x)->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 27
Counter: 28
Batcher Size:7
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 23:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 28
Counter: 29
Batcher Size:8
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
newNode(&(x));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 24:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
newNode(&(x));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 29
Counter: 30
Batcher Size:9
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
newNode(&x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 25:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
newNode(&x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 30
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        //prophet generated patch
        if (__get_mutant()==0) {
        x->key = (k);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==1) {
        y->right = x;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==2) {
        x->key = (0);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==3) {
        x = x->right;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==4) {
        (*t)->size = (k);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==5) {
        (*t)->size = (1);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==6) {
        x = (x)->right;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==7) {
        x = (x);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==8) {
        newNode(&(x));
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==9) {
        newNode(&x);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 16:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = (k);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Passed Negative Cases
Testing positive cases!
Failed positive case 6
BasicTester, Testing instance id 17:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
y->right = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 18:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = (0);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 19:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = x->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 20:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (k);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 21:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (1);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 22:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (x)->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 23:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 24:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
newNode(&(x));
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 25:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
newNode(&x);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Counter: 31
Batcher Size:0
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
if (x->key == k) {
    return 1;
}
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 26:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if (x->key == k) {
    return 1;
}
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 31
Counter: 32
Batcher Size:1
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
if (k < y->key)
    y->left = x;
else
    y->right = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 27:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if (k < y->key)
    y->left = x;
else
    y->right = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 32
Counter: 33
Batcher Size:2
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x = (y)->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 28:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (y)->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 33
Counter: 34
Batcher Size:3
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->root = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 29:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->root = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 34
Counter: 35
Batcher Size:4
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 30:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 35
Counter: 36
Batcher Size:5
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->size = (*(t))->size + 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 31:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (*(t))->size + 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 36
Counter: 37
Batcher Size:6
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->size = (0);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 32:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (0);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 37
Counter: 38
Batcher Size:7
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
x->key = (1);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 33:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = (1);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 38
Counter: 39
Batcher Size:8
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
if ((x != ((void *)0) && k > x->key))
    x = x->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 34:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((x != ((void *)0) && k > x->key))
    x = x->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 39
Counter: 40
Batcher Size:9
Preprocess the following candidate with BasicTester:
Priority -0
At location prog.c:48
--Src File: prog.c
Fragment 0:
(*t)->root = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;


BasicTester, a patch instance with id 35:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->root = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Spawn 1 instances, now Total 40
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        //prophet generated patch
        if (__get_mutant()==0) {
        if (x->key == k) {
            return 1;
        }
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==1) {
        if (k < y->key)
            y->left = x;
        else
            y->right = x;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==2) {
        x = (y)->right;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==3) {
        (*t)->root = x;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==4) {
        x = (y);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==5) {
        (*t)->size = (*(t))->size + 1;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==6) {
        (*t)->size = (0);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==7) {
        x->key = (1);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==8) {
        if ((x != ((void *)0) && k > x->key))
            x = x->right;
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
        else if (__get_mutant()==9) {
        (*t)->root = (y);
        while ((x != ((void *)0)) && k < x->key)
            x = x->left;
        }
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Merged code building succ, going to invoke tester!
BasicTester, Testing instance id 26:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if (x->key == k) {
    return 1;
}
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 27:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if (k < y->key)
    y->left = x;
else
    y->right = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 28:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (y)->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 29:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->root = x;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 30:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 31:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (*(t))->size + 1;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 32:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->size = (0);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 33:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
x->key = (1);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 34:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
if ((x != ((void *)0) && k > x->key))
    x = x->right;
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 35:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node {
    struct Node* parent;
    struct Node* left;
    struct Node* right;
    int key;
};

struct Tree {
    struct Node* root;
    int size;
};

void newNode(struct Node** n);
void newTree(struct Tree** t);
void printTree(struct Node** r);
char*  findNode(struct Tree* t, int key) ;
int insertNode (struct Tree** t, int k);

void newNode(struct Node** n) {
    *n = malloc (sizeof (struct Node));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->key = 0;
}

void newTree(struct Tree** t) {
    *t = malloc(sizeof (struct Tree));
    (*t)->root = NULL;
    (*t)->size = 0;
}

int insertNode (struct Tree** t,  int k) {
    struct Node* y= NULL;
    struct Node*  x = (*t)->root;

    while (x != NULL) {
        y=x;

        if (x->key==k) {
            return 1;
        }

        
//Patch 0:
(*t)->root = (y);
while ((x != ((void *)0)) && k < x->key)
    x = x->left;

//CodeSeg 1:
         if ((x!=NULL && k>x->key))
            x = x->right;
    }
    newNode(&x);
    x->key = k;

    if (y==NULL)
        (*t)->root = x;
    else {
        if (k<y->key)
            y->left = x;
        else
            y->right = x;
    }
    x->parent = y;
    (*t)->size = (*t)->size +1;
    return 0;
}



void printTree(struct Node** r) {
    if ((*r)==NULL) return;
    printf("%d ",(*r)->key);
    printTree(&((*r)->left));
    printTree(&((*r)->right));
}

char*  findNode(struct Tree* t, int key) {
    int i=0;
    char* x = (char*) malloc(10 * sizeof(char));

    struct Node* tmp = t->root;
    while (tmp!= NULL) {
        if (tmp->key == key) {
            x[i] = '\0';
            return x;
        } else if (tmp->key < key) {
            x[i]='R';
            i++;
            tmp = tmp->right;
        } else {
            x[i]='L';
            i++;
            tmp = tmp->left;
        }
    }
    return NULL;
}


int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct Tree* t;
    newTree(&t);

    char x[20];
    int res = 0;
    fscanf(f,"%s",x);
    fscanf(f,"%s",x);
    int ins = atoi(x);
    char *ins_loc;
    fscanf(f,"%s",x);

    ins_loc = (char*)  malloc((strlen(x)+1) * sizeof(char));
    strcpy(ins_loc, x);

    while (fscanf(f,"%s",x)==1) {
        if (x[0]== '"') continue;
        struct Node* n=NULL;
        newNode(&n);
        n->key = atoi(x);
        fscanf(f,"%s",x);
        struct Node* node = t->root;
        if (strcmp(x,"RO")==0) {
            t->root  = n;
        }
        else {
            int i=0;
            int len = strlen(x);
            while (i<(len-1)){
                if (x[i]=='R')
                    node= node->right;
                else if (x[i]=='L')
                    node = node->left;
                i++;
            }
            if (x[i]=='R') {
                node->right = n;
            }
            if (x[i]=='L') {
                node->left = n;
            }

        }
    }
    res = insertNode(&t, ins);
    fclose(f);

    char* loc = findNode(t,ins);
    res += strcmp(loc,ins_loc);
    printf ("%d",res);

    return 0;
}

Testing negative cases!
Repair process ends without working fix!!
Total 40 different repair schemas!!!!
Total 72 different repair candidate templates for scoring!!!
Total number of compiles: 4
Total number of test eval: 64
