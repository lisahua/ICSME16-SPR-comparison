Initialize the program!
Verify Test Cases
All passed!
Done Verification
Generating repair candidates!
Processing prog.c
Total 48 different repair schemas!!!!
Total 103 different repair candidate templates for scoring!!!
Trying different candidates!
BasicTester pointer: 0xab8a468
StringConstTester pointer: 0xab8a2a0
CondTester pointer: 0xab8a1d0
Counter: 1
Batcher Size:0
Preprocess the following candidate with CondTester:
Priority 10000
At location prog.c:98
--Src File: prog.c
Fragment 0:
if ((__abst_hole(p, p->left, ch, e, p->parent, value, cnt, root, p->right, p->value, p->color)))
    return 0;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


CondTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    return 0;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 1
Counter: 2
Batcher Size:1
Preprocess the following candidate with CondTester:
Priority 10000
At location prog.c:98
--Src File: prog.c
Fragment 0:
if ((__abst_hole(p, p->left, ch, e, p->parent, value, cnt, root, p->right, p->value, p->color)))
    break;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


CondTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    break;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 2
Counter: 3
Batcher Size:2
Preprocess the following candidate with CondTester:
Priority 10000
At location prog.c:98
--Src File: prog.c
Fragment 0:
if ((__abst_hole(p, p->left, ch, e, p->parent, value, cnt, root, p->right, p->value, p->color)))
    return 1;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


CondTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    return 1;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 3
Counter: 4
Batcher Size:3
Preprocess the following candidate with CondTester:
Priority 10000
At location prog.c:98
--Src File: prog.c
Fragment 0:
if ((__abst_hole(p, p->left, ch, e, p->parent, value, cnt, root, p->right, p->value, p->color)))
    return 10;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


CondTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    return 10;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 4
Counter: 5
Batcher Size:4
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:98
--Src File: prog.c
Fragment 0:
ch = p;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


BasicTester, a patch instance with id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
ch = p;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 5
Counter: 6
Batcher Size:5
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:98
--Src File: prog.c
Fragment 0:
newEntry(&(ch));
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


BasicTester, a patch instance with id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
newEntry(&(ch));
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 6
Counter: 7
Batcher Size:6
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:98
--Src File: prog.c
Fragment 0:
printTree((e)->right);
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


BasicTester, a patch instance with id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
printTree((e)->right);
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 7
Counter: 8
Batcher Size:7
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:98
--Src File: prog.c
Fragment 0:
p = (p)->parent;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


BasicTester, a patch instance with id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
p = (p)->parent;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 8
Counter: 9
Batcher Size:8
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:98
--Src File: prog.c
Fragment 0:
p = (e)->parent;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


BasicTester, a patch instance with id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
p = (e)->parent;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 9
Counter: 10
Batcher Size:9
Preprocess the following candidate with BasicTester:
Priority 5000
At location prog.c:98
--Src File: prog.c
Fragment 0:
val_i = 0;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }


BasicTester, a patch instance with id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
val_i = 0;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Spawn 1 instances, now Total 10
a batched test job starts!
Building merged code:
src_file: prog.c
full src: int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            //prophet generated patch
            if (__get_mutant()==0) {
            if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
                return 0;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==1) {
            if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
                break;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==2) {
            if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
                return 1;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==3) {
            if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
                return 10;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==4) {
            ch = p;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==5) {
            newEntry(&(ch));
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==6) {
            printTree((e)->right);
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==7) {
            p = (p)->parent;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==8) {
            p = (e)->parent;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            else if (__get_mutant()==9) {
            val_i = 0;
            while ((p != ((void *)0)) && (p->left == ((void *)0)))
                {
                    ch = p;
                    p = p->parent;
                }
            }
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Merged code building succ, going to invoke tester!
CondTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    return 0;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
Testing 8 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 1
Passed in iteration!
Testing 9 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 1
Passed in iteration!
Testing 10 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 1
Passed in iteration!
Testing 11 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Passed in iteration!
Passed Negative Cases wiht CondTestder!
Testing positive cases!
Passed Positive Cases
Collect values for post processing!
Passed!
CondTester, Testing instance id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    break;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
Testing 8 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 3
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 4
Branch 0: 0
Branch 1: 1
Iteration 5
Branch 0: 1
CondTester, Testing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    return 1;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
Testing 8 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 3
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 4
Branch 0: 0
Branch 1: 1
Iteration 5
Branch 0: 1
CondTester, Testing instance id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    return 10;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
Testing 8 (with abstract condition)
Iteration 0
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 0
Iteration 1
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 0
Branch 4: 1
Iteration 2
Branch 0: 0
Branch 1: 0
Branch 2: 0
Branch 3: 1
Iteration 3
Branch 0: 0
Branch 1: 0
Branch 2: 1
Iteration 4
Branch 0: 0
Branch 1: 1
Iteration 5
Branch 0: 1
BasicTester, Testing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
ch = p;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 1:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
newEntry(&(ch));
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 2:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
printTree((e)->right);
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 3:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
p = (p)->parent;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 4:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
p = (e)->parent;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
BasicTester, Testing instance id 5:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
val_i = 0;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Testing negative cases!
CondTester, Postprocessing instance id 0:
//src_file:prog.c
//Total frags: 1
//CodeSeg 0:
int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Entry {
    struct Entry* parent;
    struct Entry* left;
    struct Entry* right;
    char* value;
    int color;
};

struct TreeMap {
    struct Entry* root;
    int size;
};

void newEntry(struct Entry** n);
void newTreeMap(struct TreeMap** t);
void getFirstEntry(struct TreeMap** tree, struct Entry** p);
void successor(struct Entry** t, struct Entry** p);
int containsValue(struct Entry* root, char* value);
void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res);
void buildTree(int size, char** value, struct Entry** root) ;
int val_i;

void newEntry(struct Entry** n) {
     *n = malloc (sizeof (struct Entry));
    (*n)->parent = NULL;
    (*n)->left = NULL;
    (*n)->right = NULL;
    (*n)->color = 1;
    (*n)->value = NULL;
}

void newTreeMap(struct TreeMap** t) {
    *t = malloc(sizeof (struct TreeMap));
    (*t)->root = NULL;
    (*t)->size = 0;
}

void getFirstEntry(struct TreeMap** tree, struct Entry** p) {
    *p = (*tree)->root;
    if ((*p)!=NULL) {
        while ((*p)->left != NULL)
            *p = (*p)->left;
    }
    return ;
}

void successor(struct Entry** t, struct Entry** p) {
    if ((*t)==NULL) {
        (*p)=NULL;
        return;
    }else if ((*t)->left !=NULL) {
        *p = (*t)->right;
        while ((*p)->left != NULL)
            *p = (*p)->left;
        return;
    } else {
        *p = (*t)->parent;
        struct Entry* ch = *t;
        while (((*p) != NULL) && (ch ==(*p)->right)) {
            ch = *p;
            *p = (*p)->parent;
        }
        return;
    }
}

int containsValue(struct Entry* root, char* value) {
    struct Entry* e = root;
//    printf("contains value %s root %s, %d",value, e->value,strcmp(value, e->value));
    if (e !=NULL) {
        while (e->left != NULL)
            e = e->left;
    }

    int cnt = 0;
    while ((e!= NULL)&& (cnt<10)) {
        cnt++;
        if ((value ==NULL && e->value == NULL) || (strcmp(value, e->value)==0))
            return 0;

        if ((e->right) != NULL) {
            struct Entry* p = e->right;
            while ((p->left != NULL))
                p = p->left;
            e = p;
        }

        else {
            struct Entry* ch = e;

            struct Entry* p = e->parent;
            // BUG RBTERR1
            
//Patch 0:
if ((__is_neg(11, &(p), sizeof (p), &(p->left), sizeof (p->left), &(ch), sizeof (ch), &(e), sizeof (e), &(p->parent), sizeof (p->parent), &(value), sizeof (value), &(cnt), sizeof (cnt), &(root), sizeof (root), &(p->right), sizeof (p->right), &(p->value), sizeof (p->value), &(p->color), sizeof (p->color))))
    return 0;
while ((p != ((void *)0)) && (p->left == ((void *)0)))
    {
        ch = p;
        p = p->parent;
    }

//CodeSeg 1:
            e=p;
        }
    }
   // if (cnt==10)
     //   return 1;
    return 1;
}

void buildFromSorted (int level, int lo, int hi, int redLevel, char** value, struct Entry** res) {
    if (hi < lo) {
        *res = NULL;
        return;
    }
    int mid = (lo+hi)/2;
    struct Entry* left = NULL;
    if (lo < mid)
         buildFromSorted(level+1, lo, mid-1,redLevel, value, &left);

    struct Entry* middle;
    newEntry(&middle);
//     printf("build sort middle value %s, %s,",value[0],value[val_i]);
    middle->value = value[val_i++];


    if (level==redLevel)
        middle->color = 0;
    if (left != NULL) {
        middle->left = left;
        left->parent = middle;
    }

    if (mid < hi) {
        struct Entry* right;
        buildFromSorted(level+1,mid+1,hi, redLevel, value, &right);
        middle->right = right;
        right->parent = middle;
    }
    *res = middle;
}

void buildTree(int size, char** value, struct Entry** root) {
    int level = 0;
    for (int m=size-1;m>=0;m=m/2-1)
        level++;

    buildFromSorted(0,0,size-1,level,value,root);
}

void printTree(struct Entry* root) {
    if (root==NULL) return;
    printf("%s ",root->value);
    printTree(root->left);
     printTree(root->right);
}
int main(int argc, char* argv[]) {
    if (argc<2) return 0;
    FILE *f = fopen(argv[1],"r");
    if (f==NULL)
        return 0;

    struct TreeMap* t;
    newTreeMap(&t);

    char x[20];
     char* input[20];
    int i=0;
    char find[10];
    fscanf(f,"%s",find);
    fscanf(f,"%s",find);
    while (fscanf(f,"%s",x)==1) {
        if (x[0]!= '"') {
            int len = strlen(x)+1;
            input[i] = (char*) malloc(len * sizeof (char));// (char*) malloc (sizeof (char*len))
           strcpy(input[i],x);
            i = i+1;
        }
    }
    fclose(f);
//    printf("size %d,",i);
    val_i = 0;
//    for (int j=0;j<i;j++)
//        printf("%s ",input[j]);

    struct Entry* root = t->root;
    buildTree(i,input,&root);
//    printf("%s ","after build tree root ");
//    printTree(root);
    int res = containsValue(root, find);
    printf("%d",res);

    return 0;
}

Trying a synthesis expr 1
Verifing Negative cases!
Verifying positive cases
Failed positive case 6
Not passed!
Trying a synthesis expr p->left == 0
Verifing Negative cases!
Not passed!
Trying a synthesis expr p->left != 0
Verifing Negative cases!
Not passed!
Trying a synthesis expr p->parent != 0
Verifing Negative cases!
Verifying positive cases
Failed positive case 6
Not passed!
Trying a synthesis expr p != 0
Verifing Negative cases!
Verifying positive cases
Passed Positive Cases
Passed!
Passed with updated best score 10000000.000000
Generate a candidate with schema id: 1
Total cnt of passed cond schemas: 1
Total cnt of cond schemas: 4
Counter: 11
Batcher Size:0
The found score 10000000.000000 is greater than current score 5000.000000!
Terminate current session!
Generate a candidate with schema id: 1
Total cnt of passed cond schemas: 1
Total cnt of cond schemas: 4
The first schema id that generates patch: 1
Found a fix! Store to: __fixed_prog.c
Repair process ends successfully!
Total 48 different repair schemas!!!!
Total 103 different repair candidate templates for scoring!!!
Total number of compiles: 6
Total number of test eval: 70
